1. устанавливаю Vite: yarn create vite
2. создаю папку description для описания последовательности действий и добавляю её в gitignore
   создаю файл .editorconfig: 
    root = true          --> Эта строка указывает, что этот файл является корневым файлом конфигурации, который должен 
                             применяться ко всем файлам и папкам в проекте.
    [*]                  -->  Эта строка определяет секцию конфигурации, которая будет применяться ко всем файлам. 
                              Это означает, что ниже перечисленные настройки будут применяться ко всем файлам в проекте, 
                              если они не переопределены в более специфичных секциях.
    indent_style = space  --> Эта строка устанавливает стиль отступов для всех файлов как пробелы. 
                             Вместо использования символов табуляции для создания отступов, будет использоваться 
                             заданное количество пробелов.
    indent_size = 2      --> Эта строка определяет количество пробелов, которые будут использоваться при создании 
                             отступов. В данном случае, отступ будет состоять из двух пробелов.
    end_of_line = lf     --> Эта строка определяет символ конца строки, который будет использоваться во всех файлах.
                             Здесь используется lf, что обозначает символ перевода строки (Line Feed)
    trim_trailing_whitespace = true  --> Эта строка указывает на необходимость удаления лишних пробелов в конце 
                                         строк при сохранении файлов. Если эта настройка установлена в true, 
                                         все пробелы, следующие после последнего символа на каждой строке, 
                                         будут удалены.
    insert_final_newline = true --> Эта строка указывает, что в конце каждого файла должна быть вставлена пустая 
                                    строка. Это хорошая практика для файлов, чтобы убедиться, что последняя строка 
                                    не сливается с операционной системой и легко различима.
    charset = utf-8             -->  Эта строка определяет кодировку файлов как UTF-8. UTF-8 является стандартной 
                                     кодировкой, которая поддерживает широкий диапазон символов, включая символы 
                                     различных языков и символы Unicode.
    [*.md]                      --> Эта строка определяет секцию конфигурации, которая будет применяться только к 
                                    файлам с расширением .md (Markdown файлы).
    trim_trailing_whitespace = false --> В этой специфичной секции для Markdown файлов отключено удаление пробелов 
                                         в конце строк. Это может быть полезным, если в Markdown файле пробелы в 
                                         конце строк имеют смысл и нужны для форматирования.

    Этот код представляет собой конфигурационный файл для редактора кода или системы управления версиями,
    такой как Git. Он содержит настройки форматирования текста и кодировки для различных типов файлов.
3. создаю файл .prettierrc.json:
   {
  "printWidth": 80,              --> Это опция указывает максимальную ширину строки, после которой Prettier будет 
                                     автоматически переносить код на новую строку для поддержки читаемости. 
                                     Здесь установлено значение 80 символов.
  "tabWidth": 2,                 --> Эта опция задает количество пробелов, которое будет использоваться вместо 
                                     символа табуляции для создания отступов. Здесь используется два пробела.
  "useTabs": false,              --> Эта опция определяет, будут ли использоваться символы табуляции (\t) для 
                                     создания отступов. Здесь установлено значение false, что означает использование 
                                     пробелов вместо табуляции.
  "semi": true,                  --> Эта опция указывает, будет ли добавляться точка с запятой в конце выражений. 
                                     Здесь установлено значение true, что означает добавление точки с запятой.
  "singleQuote": true,           --> Эта опция указывает, будут ли использоваться одинарные кавычки вместо двойных 
                                     кавычек для строковых литералов. Здесь установлено значение true, что означает 
                                     использование одинарных кавычек.
  "trailingComma": "es5",        --> Эта опция определяет, будет ли добавляться запятая после последнего элемента в 
                                     массивах или объектах. Здесь установлено значение "es5", что означает добавление
                                     запятой (trailing comma) только для старых версий ECMAScript (ES5).
  "bracketSpacing": true,        --> Эта опция указывает, будут ли добавляться пробелы вокруг скобок. 
                                     Здесь установлено значение true, что означает добавление пробелов вокруг скобок.
  "jsxBracketSameLine": false,   --> Эта опция определяет, будут ли угловые скобки в JSX-элементах находиться на 
                                     той же строке, что и открывающий тег, или на новой строке. Здесь установлено 
                                     значение false, что означает размещение угловых скобок на новой строке.
  "arrowParens": "avoid",        --> Эта опция указывает, будут ли скобки вокруг единственного параметра стрелочных 
                                     функций опущены или оставлены. Здесь установлено значение "avoid", что означает 
                                     опустить скобки, если есть только один параметр.
  "proseWrap": "always"          --> Эта опция определяет, будут ли переноситься строки внутри текстовых блоков 
                                     (например, комментариев). Здесь установлено значение "always", что означает 
                                     всегда переносить строки внутри текстовых блоков.
}
    Этот код представляет собой конфигурацию для форматирования кода с использованием инструмента Prettier. 
    Prettier - это инструмент, который автоматически форматирует код в соответствии с определенными правилами, 
    чтобы обеспечить единообразный стиль кодирования в проекте.
4. Создаю файл .jsconfig.json: 
   {
  "compilerOptions": {                  --> Этот объект содержит опции компилятора TypeScript, которые позволяют 
                                            настроить поведение компиляции кода.
    "baseUrl": "src"                    --> Эта опция указывает базовый путь (baseUrl) для разрешения модулей. 
                                            Здесь установлено значение "src", что означает, что при импорте модулей 
                                            компилятор будет искать их относительно папки "src". Например, 
                                            импорт import { example } from "components" будет искать модуль 
                                            "components" внутри папки "src".
  },
  "include": ["src", "public/locales"]  --> Этот массив определяет список путей или шаблонов файлов, которые должны 
                                            быть включены в процесс компиляции или сборки проекта.
                                            "src": Этот путь указывает на папку "src" и все ее подпапки. 
                                            Все файлы TypeScript или другие файлы, соответствующие этому пути, 
                                            будут включены в процесс компиляции или сборки.
                                            "public/locales": Этот путь указывает на папку "public/locales" и все ее 
                                            подпапки. Все файлы, соответствующие этому пути, будут включены в 
                                            процесс компиляции или сборки.
  }
  Общая цель этой конфигурации - задать базовый путь для разрешения модулей и указать, какие файлы должны быть 
  включены в процесс компиляции или сборки. Это может быть полезно, когда вы хотите настроить структуру проекта 
  или включить только определенные части кода в процесс сборки или компиляции.
5. Устанавливаем yarn add firebase react-firebase-hooks